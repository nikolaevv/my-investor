// Code generated by MockGen. DO NOT EDIT.
// Source: password.go

// Package mock_hash is a generated GoMock package.
package mock_hash

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswords is a mock of Passwords interface.
type MockPasswords struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordsMockRecorder
}

// MockPasswordsMockRecorder is the mock recorder for MockPasswords.
type MockPasswordsMockRecorder struct {
	mock *MockPasswords
}

// NewMockPasswords creates a new mock instance.
func NewMockPasswords(ctrl *gomock.Controller) *MockPasswords {
	mock := &MockPasswords{ctrl: ctrl}
	mock.recorder = &MockPasswordsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswords) EXPECT() *MockPasswordsMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockPasswords) CheckPassword(password, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockPasswordsMockRecorder) CheckPassword(password, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockPasswords)(nil).CheckPassword), password, passwordHash)
}

// HashAndSalt mocks base method.
func (m *MockPasswords) HashAndSalt(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashAndSalt", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashAndSalt indicates an expected call of HashAndSalt.
func (mr *MockPasswordsMockRecorder) HashAndSalt(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashAndSalt", reflect.TypeOf((*MockPasswords)(nil).HashAndSalt), password)
}
