// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/nikolaevv/my-investor/pkg/auth"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// AuthorizateUser mocks base method.
func (m *MockJWT) AuthorizateUser(r *http.Request, SigningKey string) (*auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizateUser", r, SigningKey)
	ret0, _ := ret[0].(*auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizateUser indicates an expected call of AuthorizateUser.
func (mr *MockJWTMockRecorder) AuthorizateUser(r, SigningKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizateUser", reflect.TypeOf((*MockJWT)(nil).AuthorizateUser), r, SigningKey)
}

// CreateAccessToken mocks base method.
func (m *MockJWT) CreateAccessToken(userId int, expireDuration time.Duration, signingKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", userId, expireDuration, signingKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockJWTMockRecorder) CreateAccessToken(userId, expireDuration, signingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockJWT)(nil).CreateAccessToken), userId, expireDuration, signingKey)
}

// CreateRefreshToken mocks base method.
func (m *MockJWT) CreateRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockJWTMockRecorder) CreateRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockJWT)(nil).CreateRefreshToken))
}

// ParseToken mocks base method.
func (m *MockJWT) ParseToken(accessToken, signingKey string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken, signingKey)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockJWTMockRecorder) ParseToken(accessToken, signingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockJWT)(nil).ParseToken), accessToken, signingKey)
}
