// Code generated by MockGen. DO NOT EDIT.
// Source: container.go

// Package mock_serviceСontainer is a generated GoMock package.
package mock_serviceСontainer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/nikolaevv/my-investor/internal/domain/entity"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user *entity.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// GetUserByID mocks base method.
func (m *MockUser) GetUserByID(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUser)(nil).GetUserByID), id)
}

// GetUserByLogin mocks base method.
func (m *MockUser) GetUserByLogin(login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserMockRecorder) GetUserByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUser)(nil).GetUserByLogin), login)
}

// UpdateRefreshToken mocks base method.
func (m *MockUser) UpdateRefreshToken(userId uint, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", userId, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockUserMockRecorder) UpdateRefreshToken(userId, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockUser)(nil).UpdateRefreshToken), userId, refreshToken)
}

// MockShare is a mock of Share interface.
type MockShare struct {
	ctrl     *gomock.Controller
	recorder *MockShareMockRecorder
}

// MockShareMockRecorder is the mock recorder for MockShare.
type MockShareMockRecorder struct {
	mock *MockShare
}

// NewMockShare creates a new mock instance.
func NewMockShare(ctrl *gomock.Controller) *MockShare {
	mock := &MockShare{ctrl: ctrl}
	mock.recorder = &MockShareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShare) EXPECT() *MockShareMockRecorder {
	return m.recorder
}

// CreateShare mocks base method.
func (m *MockShare) CreateShare(share *entity.Share) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShare", share)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShare indicates an expected call of CreateShare.
func (mr *MockShareMockRecorder) CreateShare(share interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShare", reflect.TypeOf((*MockShare)(nil).CreateShare), share)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateShare mocks base method.
func (m *MockRepository) CreateShare(share *entity.Share) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShare", share)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShare indicates an expected call of CreateShare.
func (mr *MockRepositoryMockRecorder) CreateShare(share interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShare", reflect.TypeOf((*MockRepository)(nil).CreateShare), share)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(user *entity.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), user)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), id)
}

// GetUserByLogin mocks base method.
func (m *MockRepository) GetUserByLogin(login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockRepositoryMockRecorder) GetUserByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockRepository)(nil).GetUserByLogin), login)
}

// UpdateRefreshToken mocks base method.
func (m *MockRepository) UpdateRefreshToken(userId uint, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", userId, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockRepositoryMockRecorder) UpdateRefreshToken(userId, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockRepository)(nil).UpdateRefreshToken), userId, refreshToken)
}
